<?php

require DRUPAL_ROOT . '/' . libraries_get_path('phpmailer') . '/' . 'class.phpmailer.php';
/**
 * @file
 * 
 * This is the mail_sender module
 * 
 * 
 */

/**
 * Implements hook_cron().
 */
function mail_sender_cron() {
  mail_sander_task();
}

/**
 * 
 * This funciton is to send e-mail
 * 
 * @param array $address  e-mail addressee
 * @param string $subject  The e-mail subject
 * @param string $body The parameter to send mail
 */
function mail_sender_send($address, $subject, $body, $isHtml) {

//  $mail_on = variable_get('smtp_on', 1);
//  if ($mail_on == 0) {
//    watchdog('mail sender send', 'phpmailer is off', array(), WATCHDOG_NOTICE);
//    return 'Phpmailer is off.';
//  }

  try {
    $mail = new PHPMailer(true); //New instance, with exceptions enabled
    $mail->IsSMTP();
    $mail->SMTPAuth = true;
    $mail->Port = variable_get('smtp_port');
    $mail->Host = variable_get('smtp_host');
    $mail->Username = variable_get('smtp_username');
    $mail->Password = variable_get('smtp_password');
    $mail->From = variable_get('site_mail');
    $mail->FromName = variable_get('site_name');
    $mail->AddReplyTo($mail->From, $mail->FromName);
    $mail->CharSet = 'iso-8859-1';

    if (is_array($address))
      foreach ($address as $to)
        $mail->AddAddress($to);
    else
      $mail->AddAddress($address);

    $mail->Subject = $subject;
    $mail->AltBody = "To view the message, please use an HTML compatible email viewer!"; // optional, comment out and test
    $mail->WordWrap = 80; // set word wrap
    $mail->MsgHTML($body);
    $mail->IsHTML($isHtml);

    return $mail->Send();
  } catch (phpmailerException $e) {
    watchdog('mail sender send', $e->errorMessage(), array(), WATCHDOG_ERROR);
  }
}

/**
 * This function is to send mail through template
 * 
 * @param array $address  e-mail addressee
 * @param string $subject  The e-mail subject
 * @param array $params The parameter to send mail
 * @parsm string $templateName The templateName,the template is location 
 *                             at drupal_get_path('module', 'mail_sender') . '/templates/'
 * 
 * @return string The result of send mail
 *         1 stand for send e-mail success
 */
function mail_sender_mail_template($address, $subject, $params, $templateName, $isImmediately) {

  $templatePath = drupal_get_path('module', 'mail_sender') . '/templates/' . $templateName;
  if (file_exists($templatePath))
    $template = file_get_contents($templatePath);
  else {
    watchdog('mail sender template', 'Template files does not exist', array(), WATCHDOG_ERROR);
    $template = '<div>Error</div>';
  }
  $content = '';
  $key = '';
  $isKey = false;
  for ($i = 0; $i < strlen($template); $i++) {
    if ($template[$i] == '[') {
      $isKey = true;
    }
    else if ($template[$i] == ']') {
      $content .= $params[$key];
      $isKey = false;
      $key = '';
    }
    else if ($isKey == true) {
      $key = $key . $template[$i];
    }
    else {
      $content = $content . $template[$i];
    }
  }
  $debug_mail = variable_get('debug_mail');

  if ($debug_mail) {
    $mail_insert = db_insert('prs_mail');
    $create_time = time(); //Get current unix timestamp;
    $field = array(
      'pmid' => 0,
      'address' => json_encode($address),
      'subject' => $subject,
      'body' => $content,
      'status' => 1,
      'createtime' => $create_time);
    $mail_insert->fields($field)->execute();
  }


  $mail_on = variable_get('smtp_on', 1);
  if ($mail_on == 0) {
    watchdog('mail sender send', 'phpmailer is off', array(), WATCHDOG_NOTICE);
    return 'Phpmailer is off.';
  }

  if ($isImmediately) {
    return mail_sender_send($address, $subject, $content, true);
  }
  else {
    $mail_insert = db_insert('prs_mail');
    $create_time = time(); //Get current unix timestamp;
    $field = array(
      'pmid' => 0,
      'address' => json_encode($address),
      'subject' => $subject,
      'body' => $content,
      'status' => 0,
      'createtime' => $create_time);
    return $mail_insert->fields($field)->execute();
  }
}

/**
 * Send e-mail notification through template
 * 
 * @param array $address The e-mail where send to 
 * @param array $params The parameter that the template need 
 * @param int  $type The e-mail notification type
 *             0 stand for new_review_started_notification
 *             1 stand for filling up the peer review form notification
 *
 */
function mail_sender_template_adapter($address, $params, $type) {
  $subject = 'Enterprise Review Notification';
  $isImmediately = false;

  switch ($type) {
    // 0 stand for new_review_started_notification
    case 0:
      if ($params['type'] == 'counselee') {
        $subject = $params['reviewname'] . " has begun.Please select peers for yourself";
        $templateName = 'counselee_new_review_started.tpl.php';
      }
      else if ($params['type'] == 'counselor') {
        $subject = $params['reviewname'] . " has begun.Please select peers for " . $params['username'];
        $templateName = 'counselor_new_review_started.tpl.php';
      }
      break;
    //1 stand for notifying user to fill up peers-review form
    case 1:
      $subject = $params['reviewname'] . " has begun.Please help " . $params['employeeName'] . " fill up peer review form";
      $templateName = 'peer_select_peer.tpl.php';
      break;
    //2 stand for notifying counselee has submitted self review
    case 2:
      $templateName = 'counselor_counselee_submit_self_review.tpl.php';
      break;
    //3 stand for reminding peer to provider feedback 
    case 3:
      $templateName = 'peer_provider_feedback_remind.tpl.php';
      $isImmediately = true;
      break;
    //4 stand for counselee audit the review result
    case 4:
      $templateName = 'counselor_counselee_audit_review_result.tpl.php';
      break;
    //5 stand for counselor audit the review result,notify counselee the review result
    case 5:
      $templateName = 'counselee_counselor_audit_review.tpl.php';
      break;

    default:
      break;
  }
  return mail_sender_mail_template($address, $subject, $params, $templateName, $isImmediately);
}

/**
 * Read e-mail content from database and send it.
 * 
 * dataTable is 'PRS_mail'
 * 
 */
function mail_sander_task() {

  $max_send = 10;

  $mail_query = db_select('prs_mail', 'mail');
  $mail_query->addField('mail', 'pmid');
  $mail_query->addField('mail', 'address');
  $mail_query->addField('mail', 'subject');
  $mail_query->addField('mail', 'body');
  $mail_query->condition('mail.status', 0);
  $mail_query->orderBy('mail.pmid', 'desc');

  $mail_query->range(0, $max_send);
  $mail_result = $mail_query->execute()->fetchAll();
  $mail_id = array();

  foreach ($mail_result as $task) {
    $id = $task->pmid;
    $address = json_decode($task->address);
    $subject = $task->subject;
    $body = $task->body;
    $send_message = mail_sender_send($address, $subject, $body, true);
    if ($send_message == '1') {
      $mail_id[] = $id;
    }
    else {
      watchdog('mail sender task', $send_message, array(), WATCHDOG_ERROR);
    }
  }

  foreach ($mail_id as $id) {
    try {
      $delete_query = "delete from prs_mail where pmid = $id";
      db_query($delete_query);
    } catch (Exception $e) {
      watchdog('mail sender task', 'Error delete mail sender task.', array(), WATCHDOG_ERROR);
    }
  }

  return true;
}

function mail_sender_menu() {
  $items['mail-notification/provider-feedback-remind'] = array(
    'title' => 'Provider Peer Review Feedback',
    'page callback' => 'provider_feedback_remind',
    'page arguments' => array(),
    'access arguments' => array('access to my dashboard'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Counselee or counselee remind peer to provider feedback
 * @param int $prid prs_rel_provider_employee id
 * 
 */
function provider_feedback_remind($prid) {

  $prid = $_POST['prid'];
  $query = db_select('prs_rel_provider_employee', 'provider');
  $query->join('prs_rel_review_employee', 'review', 'provider.prid= review.prid');
  $query->join('prs_general', 'general', 'general.prid = provider.prid');
  $query->join('prs_reviewers', 'reviewer', 'reviewer.login_name = provider.providername');
  $query->addField('provider', 'rpeid');
  $query->addField('general', 'type');
  $query->addField('general', 'description');
  $query->addField('provider', 'employeename');
  $query->addField('provider', 'providername');
  $query->addField('reviewer', 'mail');
  $query->addField('provider', 'token');
  $query->condition('provider.rpeid', $prid);

  $dataset = $query->execute()->fetchAll();
  if (count($dataset) == 1) {
    $address = $dataset[0]->mail;
    $url = get_curPage_base_url() . $dataset[0]->token;
    $params = array(
      'reviewname' => $dataset[0]->description,
      'receiver' => $dataset[0]->providername,
      'counselee' => $dataset[0]->employeename,
      'url' => $url,
    );

    //3 stand for the template type
    $template_type = 3;
    print mail_sender_template_adapter($address, $params, $template_type);
  }
}

/**
 * Remind the counselor that counselor disapprove the review result.
 * 
 * @param int $rreid  the prs_rel_review_employee rreid
 */
function counselee_aduit_review_result_remind($rreid, $is_approve) {
  $query = db_select('prs_rel_review_employee', 'review');
  $query->join('prs_general', 'general', 'general.prid = review.prid');
  $query->join('prs_rel_employee_counselor_gm', 'relation', 'relation.employeeName= review.employeeName');
  $query->join('prs_reviewers', 'reviewer', 'reviewer.login_name = relation.counselorName');
  $query->addField('review', 'employeeName');
  $query->addField('general', 'description');
  $query->addField('relation', 'counselorName');
  $query->addField('reviewer', 'mail');
  $query->condition('review.rreid', $rreid);

  $dataset = $query->execute()->fetchAll();

  if ($is_approve == true)
    $audit = 'approve';
  else
    $audit = 'disapprove';


  if (count($dataset) == 1) {
    $address = $dataset[0]->mail;
    $params = array(
      'counselor' => $dataset[0]->counselorName,
      'counselee' => $dataset[0]->employeeName,
      'aduit' => $audit,
      'reviewname' => $dataset[0]->description,
      'url' => get_curPage_base_url() . 'watchstatus/viewassessment/' . $rreid,
    );
    $template_type = 4;
    return mail_sender_template_adapter($address, $params, $template_type);
  }
}

/**
 * Send mail notification to counselee,when the counselor had audited the review
 * 
 * @param string $address The receiver/counselee e-mail address
 * @param string $counselee_name The counselee name
 * @param string $counselor_name The counselor name
 * @param string $nid The nid of the node,counselee annual performance review node
 * @param bool $is_approve if
 */
function counselor_audit_review_remind($address, $counselee_name, $counselor_name, $token, $rreid, $is_approve) {

  if ($is_approve) {
    $url = get_curPage_base_url() . 'counseleeconfirmresult/' . $rreid;
  }
  else {
    $url = get_curPage_base_url() . $token;
  }
  $params = array(
    'counselee' => $counselee_name,
    'counselor' => $counselor_name,
    'url' => $url,
  );
  $type = 5; // 5 stand for counselor audit the review result
  return mail_sender_template_adapter($address, $params, $type);
}