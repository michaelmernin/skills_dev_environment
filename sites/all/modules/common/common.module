<?php

/**
 * @file
 * 
 * This is the Common module you can put Common method in here
 * 
 * 
 */

/**
 * return my counselor and gm name
 * @param type $my_name
 * @return type
 * @author Mars
 */
function my_counselor_gm_name($my_name) {
  $query = db_select('prs_rel_employee_counselor_gm', 'prec');
  $query->fields('prec', array('counselorName', 'gmName'));
  $query->condition('prec.employeeName', $my_name);
  $result = $query->execute()->fetchAll();
  return $result;
}

/**
 * get_current_user_name
 * @global type $user
 * @return string
 */
function get_current_user_name() {
  global $user;
  if ($user->uid != 0) {
    $cur_name = $user->name;
  }
  else {
    $cur_name = 'anonymous';
  }
  return $cur_name;
}

/**
 * get basic information from db
 * @param type $review_id
 * @return type
 * @author Mars
 */
function get_basic_review_information($review_id) {
//   $cur_user_name = get_current_user_name();
  $query = db_select('prs_rel_review_employee', 're');
  $query->join('prs_general', 'pg', 'pg.prid=re.prid');
  $query->fields('re', array('employeeName', 'rreid', 'rstatus'));
  $query->addField('pg', 'period_start');
  $query->addField('pg', 'period_end');
  $query->addField('pg', 'time_frame_from');
  $query->addField('pg', 'time_frame_to');
  $query->addField('pg', 'project_name');
  $query->addField('pg', 'type');
  $query->addField('pg', 'description');
  $query->condition('re.rreid', $review_id);
  $result = $query->execute()->fetchAll();
  return $result;
}

function format_login_name($login_name) {
  $formated_name = '';
  if (strpos($login_name, '.')) {
    $tmp = explode('.', $login_name);
    foreach ($tmp as $value) {
      $formated_name .= ucfirst($value) . ' ';
    }
  }
  else {
    $formated_name = $login_name;
  }
  return trim($formated_name);
}

function get_my_anniversary_counselor($my_name) {
  $info = array();
  $my_counselor_gm_name = my_counselor_gm_name($my_name);
  $my_counselor_name = $my_counselor_gm_name[0]->counselorName;
  $my_anniversary_month = my_anniversary_date($my_name);
  $info['my_counselor_name'] = format_login_name($my_counselor_name);
  $info['my_anniversary_month'] = $my_anniversary_month;
  return $info;
}

function my_anniversary_date($login_name) {
  $result = db_select('prs_reviewers', 'pr')->fields('pr', array('account_created'))->condition('login_name', $login_name)->execute()->fetchAll();
  if (count($result) != 0) {
    $a_date = $result[0]->account_created;
    $year = substr($a_date, 0, 4);
    $month = substr($a_date, 4, 2);
    return $year . '/' . $month;
  }
  else {
    return '';
  }
  return trim($formated_name);
}


/**
 * select_email_from_prs_reviewers
 * @param type $employee_name_array
 * @return type
 * @author Mars
 */
function select_email_from_prs_reviewers($employee_name_array) {
  $query = db_select('prs_reviewers', 'pr');
  $query->fields('pr', array('mail', 'login_name'));  
  $query->condition('pr.login_name', $employee_name_array, 'in');
  $result = $query->execute()->fetchAll();
  return $result;
}
  
/*
 * generate_array from db return format to array
 * @param type array is generated from db, item is the attribute which you want to format.
 * @return array
 * by Anfernee
 */

function generate_array($source_array, $attribute) {
  $result_array = array();
  foreach ($source_array as $key => $source_item) {
    $target_item = $source_item->$attribute;
    array_push($result_array, $target_item);
  }
  return $result_array;
}

function get_counselor($employeeName) {
  $query = db_select('prs_rel_employee_counselor_gm', 'precg')
      ->fields('precg', array('counselorName'))
      ->condition('precg.employeeName', $employeeName, '=');
  $result = $query->execute()->fetchAll();
  $counselor = generate_array($result, 'counselorName');

  return $counselor[0];
}

function get_user_identity($rreid) {
  $cur_user_name = get_current_user_name();
  $reviewee = get_reviewee_from_db($rreid);
  $counselor = get_counselor($reviewee);
  if ($reviewee == $cur_user_name) {
    return 0;
  }
  else if ($cur_user_name == $counselor) {
    return 1;
  }
  else {
    return -1;
  }
}

function access_authen($rreid) {
  $id = get_user_identity($rreid);
  if ($id == -1) {
    drupal_goto('mydashboard');
  }
}

/**
 * unixTimestampToDateArray
 * @param type $timestamp
 * @param type $later
 * @param type $earlier
 * @return type
 */
function unixTimestampToDateArray($timestamp, $later = 0, $earlier = 0) {
  $date_array = array();
  if ($timestamp == 0) {
    // configure first time
    $timestamp = time();
    $date_array['day'] = date('j', $timestamp);
    $date_array['month'] = date('n', $timestamp);
    if ($later) {
      $date_array['month'] = date('n', mktime(0, 0, 0, date('n', $timestamp) + 1, date('j', $timestamp), date('Y', $timestamp)));
    }
    if ($earlier) {
      $date_array['month'] = date('n', mktime(0, 0, 0, date('n', $timestamp) - 1, date('j', $timestamp), date('Y', $timestamp)));
    }

    if ($date_array['month'] == 12 && $earlier) {
      $date_array['year'] = date('Y', $timestamp) - 1;
    }
    else {
      $date_array['year'] = date('Y', $timestamp);
    }
  }
  else {
    $date_array['day'] = date('j', $timestamp);
    $date_array['month'] = date('n', $timestamp);
    $date_array['year'] = date('Y', $timestamp);
  }
  return $date_array;
}

/**
 * dateArrayTounixTimestamp
 * @param type $date_array
 * @return type
 */
function dateArrayTounixTimestamp($date_array) {
  $timestamp = 0;
  if (!empty($date_array)) {
    $day = $date_array['day'];
    $month = $date_array['month'];
    $year = $date_array['year'];
    $timestamp = mktime(23, 59, 59, $month, $day, $year);
  }
  return $timestamp;
}

/**
 * date_to_format
 * @param type $date
 * @return type
 * @author Mars
 */
function date_to_format($date) {
  return $date['month'] . '/' . $date['day'] . '/' . $date['year'];
}

/************************About login by Mars*****************************************/
function is_counselor() {
  $cur_user_name = get_current_user_name();
  $query = db_select('prs_rel_employee_counselor_gm', 'precg')
      ->fields('precg', array('counselorName'))
      ->condition('precg.counselorName', $cur_user_name);
  $count = $query->execute()->rowCount();
  if ($count > 0) {
    return TRUE;
  }
  else {
    return FALSE;
  }
}

function is_gm() {
  $cur_user_name = get_current_user_name();
  $query = db_select('prs_rel_employee_counselor_gm', 'precg')
      ->fields('precg', array('counselorName'))
      ->condition('precg.gmName', $cur_user_name);
  $count = $query->execute()->rowCount();
  if ($count > 0) {
    return TRUE;
  }
  else {
    return FALSE;
  }
}

function get_role_id($roles) {
  $cur_user_name = get_current_user_name();
  $query = db_select('role', 'role')
      ->fields('role')
      ->condition('role.name', $roles, 'in');
  $result = $query->execute()->fetchAll();
  foreach ($result as $role) {
    $rval[$role->name] = $role->rid;
  }
  return $rval;
}

function is_exist_counselor($role) {
  global $user;
  $query = db_select('users_roles', 'ur')
      ->fields('ur')
      ->condition('ur.uid', $user->uid)
      ->condition('ur.rid', $role['counselor']);
  $count = $query->execute()->rowCount();
  if ($count > 0) {
    return TRUE;
  }
  else {
    return FALSE;
  }
}

function is_exist_gm($role) {
  global $user;
  $query = db_select('users_roles', 'ur')
      ->fields('ur')
      ->condition('ur.uid', $user->uid)
      ->condition('ur.rid', $role['GM']);
  $count = $query->execute()->rowCount();
  if ($count > 0) {
    return TRUE;
  }
  else {
    return FALSE;
  }
}

function insert_counselor_role($role) {
  global $user;
  $id = db_insert('users_roles')
      ->fields(array(
        'uid' => $user->uid,
        'rid' => $role['counselor'],
      ))
      ->execute();
  return $id;
}

function delete_counselor_role($role) {
  global $user;
  $id = db_delete('users_roles')
      ->condition('uid', $user->uid)
      ->condition('rid', $role['counselor'])
      ->execute();

  return $id;
}

function insert_gm_role($role) {
  global $user;
  $id = db_insert('users_roles')
      ->fields(array(
        'uid' => $user->uid,
        'rid' => $role['GM'],
      ))
      ->execute();
  return $id;
}

function delete_gm_role($role) {
  global $user;
  $id = db_delete('users_roles')
      ->condition('uid', $user->uid)
      ->condition('rid', $role['GM'])
      ->execute();

  return $id;
}


/**
 *  implement something after login in ldap_authentication.inc line 485
 */
function prs_user_login_role() {
  $roles = array('counselor', 'GM');
  $rids = get_role_id($roles);
  $is_exist_counselor = is_exist_counselor($rids);
  $is_exist_gm = is_exist_gm($rids);
  if (is_counselor()) {
    if (!$is_exist_counselor) {
      insert_counselor_role($rids);
    }
  }
  else {
    if ($is_exist_counselor) {
      delete_counselor_role($rids);
    }
  }

  if (is_gm()) {
    if (!$is_exist_gm) {
      insert_gm_role($rids);
    }
  }
  else {
    if ($is_exist_gm) {
      delete_gm_role($rids);
    }
    
    
  }
}
/************************About login by Mars*****************************************/

/**
 * 
 * @param type $review_title
 * @param type $employee_name
 * @param type $provider_name
 * @return type
 */
function create_review_node($review_title, $employee_name, $provider_name) {
    $temp_name = get_temp($review_title, $employee_name);
    $node = new stdClass();
    $node->type = "webform";
    $node->title = $temp_name . ' for ' . $employee_name . ' (provider: ' . $provider_name . ')';
    $node->language = LANGUAGE_NONE;
    $node->uid = 1; // Or any id you 
    $random_string = random_string(10);
    $node->path = array('alias' => $random_string);
    $node->comment = 1;
    node_object_prepare($node);

    $node = node_submit($node);
    node_save($node);

    $temp_nid = get_temp_node_id($temp_name . ' template');
    $query = db_select('webform_component', 'wc');
    $query->fields('wc');
    $query->condition('nid', $temp_nid);
    $result = $query->execute()->fetchAll();

    foreach ($result as $key => $values) {
        $field_array = array();

        $field_array['nid'] = $node->nid;
        $field_array['cid'] = $values->cid;
        $field_array['pid'] = $values->pid;
        $field_array['form_key'] = $values->form_key;
        $field_array['name'] = $values->name;
        $field_array['type'] = $values->type;
        $field_array['value'] = $values->value;
        $field_array['extra'] = $values->extra;
        $field_array['mandatory'] = $values->mandatory;
        $field_array['weight'] = $values->weight;
        $field_array['score_weight'] = $values->score_weight;
        $field_array['min_length'] = $values->min_length;

        db_insert('webform_component')->fields($field_array)->execute();
    }

    change_redirect_path($node->nid);
    return array($node->nid, $random_string);
}

function get_review_status_from_db($rreid) {
  $query = db_select('prs_rel_review_employee', 'prre')
        ->fields('prre', array('rstatus'))
        ->condition('prre.rreid', $rreid)
        ->execute()->fetchAll();
  $result = generate_array($query, 'rstatus');
  return $result[0];
}

