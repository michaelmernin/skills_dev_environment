<?php

/**
 * @file
 *
 * This is the Common module you can put Common method in here
 *
 *
 */
// Include the .inc file.
module_load_include('inc', 'common', 'defined_constants');

/**
 * return my counselor and gm name
 * @param type $my_name
 * @return type
 * @author Mars
 */
function my_counselor_gm_name($my_name) {
  $query = db_select('prs_rel_employee_counselor_gm', 'prec');
  $query->fields('prec', array('counselorName', 'gmName'));
  $query->condition('prec.employeeName', $my_name);
  $result = $query->execute()->fetchAll();
  return $result;
}

/**
 * get_current_user_name
 * @global type $user
 * @return string
 */
function get_current_user_name() {
  global $user;
  if ($user->uid != 0) {
    $cur_name = $user->name;
  }
  else {
    $cur_name = 'anonymous';
  }
  return $cur_name;
}

/**
 * get basic information from db
 * @param type $review_id
 * @return type
 * @author Mars
 */
function get_basic_review_information($review_id) {
//   $cur_user_name = get_current_user_name();
  $query = db_select('prs_rel_review_employee', 're');
  $query->join('prs_general', 'pg', 'pg.prid=re.prid');
  $query->fields('re', array('employeeName', 'rreid', 'rstatus'));
  $query->addField('pg', 'period_start');
  $query->addField('pg', 'period_end');
  $query->addField('pg', 'time_frame_from');
  $query->addField('pg', 'time_frame_to');
  $query->addField('pg', 'project_name');
  $query->addField('pg', 'type');
  $query->addField('pg', 'description');
  $query->condition('re.rreid', $review_id);
  $result = $query->execute()->fetchAll();
  return $result;
}

function format_login_name($login_name) {
  $formated_name = '';
  if (strpos($login_name, '.')) {
    $tmp = explode('.', $login_name);
    foreach ($tmp as $value) {
      $formated_name .= ucfirst($value) . ' ';
    }
  }
  else {
    $formated_name = $login_name;
  }
  return trim($formated_name);
}

function get_my_anniversary_counselor($my_name) {
  $info = array();
  if ($my_name != 'anonymous') {
    $my_counselor_gm_name = my_counselor_gm_name($my_name);
    $my_counselor_name = NULL;
    foreach ($my_counselor_gm_name as $counselor_name) {
      $my_counselor_name = $counselor_name->counselorName;
    }
    if (isset($my_counselor_name)) {
      $my_anniversary_month = my_anniversary_date($my_name);
      if ($my_counselor_name != '') {
        $info['my_counselor_name'] = format_login_name($my_counselor_name);
      }
      else {
        $info['my_counselor_name'] = 'N/A';
      }
      $info['my_anniversary_month'] = $my_anniversary_month;
    }
    else {
      $info['my_counselor_name'] = 'N/A';
      $info['my_anniversary_month'] = 'N/A';
    }
  }
  else {
    $info['my_counselor_name'] = 'N/A';
    $info['my_anniversary_month'] = 'N/A';
  }
  return $info;
}

function my_anniversary_date($login_name) {
  $result = db_select('prs_reviewers', 'pr')->fields('pr', array('account_created'))->condition('login_name', $login_name)->execute()->fetchAll();
  if (count($result) != 0) {
    $a_date = $result[0]->account_created;
    $year = substr($a_date, 0, 4);
    $month = substr($a_date, 4, 2);
    return $year . '/' . $month;
  }
  else {
    return 'N/A';
  }
}

/**
 * select_email_from_prs_reviewers
 * @param type $employee_name_array
 * @return type
 * @author Mars
 */
function select_email_from_prs_reviewers($employee_name_array) {
  $query = db_select('prs_reviewers', 'pr');
  $query->fields('pr', array('mail', 'login_name'));
  $query->condition('pr.login_name', $employee_name_array, 'in');
  $result = $query->execute()->fetchAll();
  return $result;
}

/*
 * generate_array from db return format to array
 * @param type array is generated from db, item is the attribute which you want to format.
 * @return array
 * by Anfernee
 */

function generate_array($source_array, $attribute) {
  $result_array = array();
  foreach ($source_array as $key => $source_item) {
    $target_item = $source_item->$attribute;
    array_push($result_array, $target_item);
  }
  return $result_array;
}

function get_counselor($employeeName) {
  $query = db_select('prs_rel_employee_counselor_gm', 'precg')
      ->fields('precg', array('counselorName'))
      ->condition('precg.employeeName', $employeeName, '=');
  $result = $query->execute()->fetchAll();
  return $result['0']->counselorName;
}

function get_user_identity($rreid) {
  $cur_user_name = get_current_user_name();
  $reviewee = get_reviewee_from_db($rreid);
  $counselor = get_counselor($reviewee);
  $gm_name = get_gm_name($reviewee);
  if ($reviewee == $cur_user_name) {
    return 0;
  }
  else if ($cur_user_name == $counselor) {
    return 1;
  }
  else if ($cur_user_name == $gm_name) {
    return 2;
  }
  else {
    return -1;
  }
}

function access_authen($rreid) {
  $id = get_user_identity($rreid);
  if ($id == -1) {
    drupal_goto('accessdenied');
  }
}

/**
 * unixTimestampToDateArray
 * @param type $timestamp
 * @param type $later
 * @param type $earlier
 * @return type
 */
function unixTimestampToDateArray($timestamp, $later = 0, $earlier = 0) {
  $date_array = array();
  if ($timestamp == 0) {
    // configure first time
    $timestamp = time();
    $date_array['day'] = date('j', $timestamp);
    $date_array['month'] = date('n', $timestamp);
    if ($later) {
      $date_array['month'] = date('n', mktime(0, 0, 0, date('n', $timestamp) + 1, date('j', $timestamp), date('Y', $timestamp)));
    }
    if ($earlier) {
      $date_array['month'] = date('n', mktime(0, 0, 0, date('n', $timestamp) - 1, date('j', $timestamp), date('Y', $timestamp)));
    }

    if ($date_array['month'] == 12 && $earlier) {
      $date_array['year'] = date('Y', $timestamp) - 1;
    }
    else {
      $date_array['year'] = date('Y', $timestamp);
    }
  }
  else {
    $date_array['day'] = date('j', $timestamp);
    $date_array['month'] = date('n', $timestamp);
    $date_array['year'] = date('Y', $timestamp);
  }
  return $date_array;
}

/**
 * dateArrayTounixTimestamp
 * @param type $date_array
 * @return type
 */
function dateArrayTounixTimestamp($date_array) {
  $timestamp = 0;
  if (!empty($date_array)) {
    $day = $date_array['day'];
    $month = $date_array['month'];
    $year = $date_array['year'];
    $timestamp = mktime(23, 59, 59, $month, $day, $year);
  }
  return $timestamp;
}

/**
 * date_to_format
 * @param type $date
 * @return type
 * @author Mars
 */
function date_to_format($date) {
  return $date['month'] . '/' . $date['day'] . '/' . $date['year'];
}

/* * **********************About login by Mars**************************************** */

function is_counselor() {
  $cur_user_name = get_current_user_name();
  $query = db_select('prs_rel_employee_counselor_gm', 'precg')
      ->fields('precg', array('counselorName'))
      ->condition('precg.counselorName', $cur_user_name);
  $count = $query->execute()->rowCount();
  if ($count > 0) {
    return TRUE;
  }
  else {
    return FALSE;
  }
}

function is_gm() {
  $cur_user_name = get_current_user_name();
  $query = db_select('prs_rel_employee_counselor_gm', 'precg')
      ->fields('precg', array('counselorName'))
      ->condition('precg.gmName', $cur_user_name);
  $count = $query->execute()->rowCount();
  if ($count > 0) {
    return TRUE;
  }
  else {
    return FALSE;
  }
}

function get_role_id($roles) {
  $cur_user_name = get_current_user_name();
  $query = db_select('role', 'role')
      ->fields('role')
      ->condition('role.name', $roles, 'in');
  $result = $query->execute()->fetchAll();
  foreach ($result as $role) {
    $rval[$role->name] = $role->rid;
  }
  return $rval;
}

function is_exist_counselor($role) {
  global $user;
  $query = db_select('users_roles', 'ur')
      ->fields('ur')
      ->condition('ur.uid', $user->uid)
      ->condition('ur.rid', $role['counselor']);
  $count = $query->execute()->rowCount();
  if ($count > 0) {
    return TRUE;
  }
  else {
    return FALSE;
  }
}

function is_exist_gm($role) {
  global $user;
  $query = db_select('users_roles', 'ur')
      ->fields('ur')
      ->condition('ur.uid', $user->uid)
      ->condition('ur.rid', $role['GM']);
  $count = $query->execute()->rowCount();
  if ($count > 0) {
    return TRUE;
  }
  else {
    return FALSE;
  }
}

function insert_counselor_role($role) {
  global $user;
  $id = db_insert('users_roles')
      ->fields(array(
        'uid' => $user->uid,
        'rid' => $role['counselor'],
      ))
      ->execute();
  return $id;
}

function delete_counselor_role($role) {
  global $user;
  $id = db_delete('users_roles')
      ->condition('uid', $user->uid)
      ->condition('rid', $role['counselor'])
      ->execute();

  return $id;
}

function insert_gm_role($role) {
  global $user;
  $id = db_insert('users_roles')
      ->fields(array(
        'uid' => $user->uid,
        'rid' => $role['GM'],
      ))
      ->execute();
  return $id;
}

function delete_gm_role($role) {
  global $user;
  $id = db_delete('users_roles')
      ->condition('uid', $user->uid)
      ->condition('rid', $role['GM'])
      ->execute();

  return $id;
}

/**
 *  implement something after login in ldap_authentication.inc line 485
 */
function prs_user_login_role() {
  $roles = array('counselor', 'GM');
  $rids = get_role_id($roles);
  $is_exist_counselor = is_exist_counselor($rids);
  $is_exist_gm = is_exist_gm($rids);
  if (is_counselor()) {
    if (!$is_exist_counselor) {
      insert_counselor_role($rids);
    }
  }
  else {
    if ($is_exist_counselor) {
      delete_counselor_role($rids);
    }
  }

  if (is_gm()) {
    if (!$is_exist_gm) {
      insert_gm_role($rids);
    }
  }
  else {
    if ($is_exist_gm) {
      delete_gm_role($rids);
    }
  }
}

/* * **********************About login by Mars end**************************************** */

/**
 *
 * @param type $title
 * @param type $template_name
 * @param type $is_selfreview 1 true, 0 false
 * @return type
 */
function create_node($title, $template_name, $is_selfreview = 0) {
  $node = new stdClass();
  $node->type = "webform";
  $node->title = $title;
  $node->language = LANGUAGE_NONE;
  $node->uid = 1; // Or any id you
  $random_string = random_string(10);
  $node->path = array('alias' => $random_string);
  $node->comment = 1;
  node_object_prepare($node);

  $node = node_submit($node);
  node_save($node);

  $temp_nid = get_temp_node_id($template_name);
  $query = db_select('webform_component', 'wc');
  $query->fields('wc');
  $query->condition('nid', $temp_nid);
  $result = $query->execute()->fetchAll();

  foreach ($result as $key => $values) {
    $field_array = array();
    $peer_field_array = array();

    $field_array['nid'] = $node->nid;
    $field_array['cid'] = $values->cid;
    $field_array['pid'] = $values->pid;
    $field_array['form_key'] = $values->form_key;
    $field_array['name'] = $values->name;
    $field_array['type'] = $values->type;
    $field_array['extra'] = $values->extra;
    $field_array['value'] = $values->value;
    $field_array['required'] = $values->required;
    $field_array['weight'] = $values->weight;

    db_insert('webform_component')->fields($field_array)->execute();
    //========for peer comment display==================================
    if ($is_selfreview == 0 && $values->type == 'select') {
      $peer_field_array['nid'] = $node->nid;
      $peer_field_array['cid'] = $values->cid;
      $peer_field_array['isDisplay'] = 0;
      db_insert('prs_rel_peer_comment_display')->fields($peer_field_array)->execute();
    }
    //========for peer comment display==================================
  }

  change_redirect_path($node->nid, $is_selfreview);

  //copy validate rules
  $validate = new stdClass();
  $validate->clone_from_original_nid = $temp_nid;
  $validate->nid = $node->nid;
  webform_validation_node_clone($validate);

  return array($node->nid, $random_string);
}

function get_temp_node_id($temp_name) {
  $nid = 0;
  $query = db_select('node', 'n');
  $query->fields('n');
  $query->condition('title', $temp_name);
  $result = $query->execute()->fetchAll();
  foreach ($result as $value) {
    $nid = $value->nid;
  }
  return $nid;
}

function change_redirect_path($nid, $is_selfreview) {
  $url = 'feedbacksubmitsuccess';
  $total_submit_limit = 1; //default -1 change by Mars
  if ($is_selfreview) {
    $query = db_update('webform');
    $query
        ->fields(array(
          'redirect_url' => $url,
        ))
        ->condition('nid', $nid)
        ->execute();
  }
  else {
    $query = db_update('webform');
    $query
        ->fields(array(
          'redirect_url' => $url,
//        'allow_draft' => $allow_draft,
          'total_submit_limit' => $total_submit_limit,
        ))
        ->condition('nid', $nid)
        ->execute();
  }
}

function random_string($length = 8) {
  $str = '';
  for ($i = 0; $i < $length; $i++) {
    $str .= chr(mt_rand(65, 90));
    $str .= chr(mt_rand(97, 122));
  }
  return $str;
}

function get_review_status_from_db($rreid) {
  $query = db_select('prs_rel_review_employee', 'prre')
          ->fields('prre', array('rstatus'))
          ->condition('prre.rreid', $rreid)
          ->execute()->fetchAll();
  return $query['0']->rstatus;
}

function get_user_identity_by_nid($nid) {
  $cur_user_name = get_current_user_name();
  $reviewee = get_reviewee_from_db_by_nid($nid);
  if ($reviewee != 'template_access') {
    $counselor = get_counselor($reviewee);
    if ($reviewee == $cur_user_name) {
      return 0;
    }
    else if ($cur_user_name == $counselor) {
      return 1;
    }
    else {
      return -1;
    }
  }
  else {
    return 0;
  }
}

function get_reviewee_from_db_by_nid($nid) {
  $query = db_select('prs_rel_provider_employee', 'prpe');
  $query->fields('prpe', array('employeeName'));
  $query->condition('prpe.nid', $nid, '=');
  $result = $query->execute()->fetchAll();
  if (count($result)) {
    return $result[0]->employeeName;
  }
  else {
    //template access
    return 'template_access';
  }
}

function get_basic_review_information_by_nid($nid) {

  $query = db_select('prs_rel_provider_employee', 'prpe');
  $query->join('prs_general', 'pg', 'pg.prid=prpe.prid');
//  $query->fields('re', array('employeeName', 'rreid', 'rstatus'));
  $query->fields('pg', array('period_start'));
  $query->addField('pg', 'period_end');
  $query->addField('pg', 'time_frame_from');
  $query->addField('pg', 'time_frame_to');
  $query->addField('pg', 'project_name');
  $query->addField('pg', 'type');
  $query->addField('pg', 'description');
  $query->condition('prpe.nid', $nid);
  $result = $query->execute()->fetchAll();
  return $result;
}

function get_last_sid_by_nid($nid) {
  $sid = 0;
  $query = db_select('webform_submissions', 'ws');
  $query->fields('ws', array('sid'));
  $query->condition('ws.nid', $nid);
  $query->condition('ws.is_draft', 0);
  $query->orderBy('ws.sid');
  $result = $query->execute()->fetchAll();
  foreach ($result as $value) {
    $sid = $value->sid;
  }
  return $sid;
}

function get_this_year_sid_by_nid($nid) {
  $sid = 0;
  $query = db_select('webform_submissions', 'ws');
  $query->fields('ws', array('sid'));
  $query->condition('ws.nid', $nid);
  $query->orderBy('ws.sid');
  $result = $query->execute()->fetchAll();
  foreach ($result as $value) {
    $sid = $value->sid;
  }
  return $sid;
}

/**
 * get_provider_info
 * @param type $rreid
 * @param type $provider_name
 * @return type
 */
function get_provider_info($rreid, $provider_name = 0) {
  $query = db_select('prs_rel_provider_employee', 'prpe');
  $query->fields('prpe');
  $query->condition('prpe.rreid', $rreid);
  if ($provider_name != 0) {
    $query->condition('prpe.providerName', $provider_name);
  }
  else {
    $query->where('prpe.employeeName=prpe.providerName');
  }
  $result = $query->execute()->fetchAll();
  return $result;
}

/**
 * is_selfreview
 * @param type $nid
 * @return boolean
 */
function is_selfreview($nid) {
  $query = db_select('prs_rel_provider_employee', 'prpe');
  $query->fields('prpe');
  $query->condition('prpe.nid', $nid);
  $query->where('prpe.employeeName=prpe.providerName');
  $count = $query->execute()->rowCount();
  if ($count > 0) {
    return TRUE;
  }
  else {
    return FALSE;
  }
}

/**
 * Get the current page url
 *
 *
 */
function curPageURL() {
  $pageURL = 'http';

  if (isset($_SERVER["HTTPS"]) && $_SERVER["HTTPS"] == "on") {
    $pageURL .= "s";
  }
  $pageURL .= "://";

  if ($_SERVER["SERVER_PORT"] != "80") {
    $pageURL .= $_SERVER["SERVER_NAME"] . ":" . $_SERVER["SERVER_PORT"] . $_SERVER["REQUEST_URI"];
  }
  else {
    $pageURL .= $_SERVER["SERVER_NAME"] . $_SERVER["REQUEST_URI"];
  }
  return $pageURL;
}

/**
 * Get current page base url
 *
 */
function get_curPage_base_url() {
  $pageURL = 'http';
  if (isset($_SERVER["HTTPS"]) && $_SERVER["HTTPS"] == "on") {
    $pageURL .= "s";
  }
  $pageURL .= "://";

  if ($_SERVER["SERVER_PORT"] != "80") {
    $pageURL .= $_SERVER["SERVER_NAME"] . ":" . $_SERVER["SERVER_PORT"] . base_path();
  }
  else {
    $pageURL .= $_SERVER["SERVER_NAME"] . base_path();
  }
  return $pageURL;
}

function get_all_providers_info_from_db($rreid) {
  $query = db_query('SELECT
  *
FROM
  `prs_rel_provider_employee` a
WHERE
  a.rreid = :rreid
AND a.providerName != a.employeeName
ORDER BY
  a.nid;', array(':rreid' => $rreid))
      ->fetchAll();
  return $query;
}

function identify_accessibility($current_user_name, $reviewee, $counselor, $allowed_roles = NULL, $allowed_status = NULL, $current_status = NULL) {
  $user_id_flag = '';
  $status_flag = '';
  if ($current_user_name == $reviewee) {
    $role = 'counselee';
  }
  else if ($current_user_name == $counselor) {
    $role = 'counselor';
  }
  else {
    drupal_goto('accessdenied');
    return -1;
  }

  if (!is_null($allowed_roles)) {
    if (in_array($role, $allowed_roles)) {
      $role_flag = 1;
    }
    else {
      $role_flag = 0;
    }
  }
  else {
    $role_flag = 1;
  }

  if (!is_null($current_status) && (!(is_null($allowed_status)))) {
    if (in_array($current_status, $allowed_status)) {
      $status_flag = 1;
    }
    else {
      $status_flag = 0;
    }
  }
  else {
    $status_flag = 1;
  }

  if ($role_flag & $status_flag == 1) {
    return TRUE;
  }
  else {
    return FALSE;
  }
}

function update_review_status($rreid, &$review_arg_array = NULL, &$provider_arg_array = NULL) {
  
}

/**
 * check with filter_xss and check_plain
 * @param type $unsafe_string
 * @return type
 */
function filter_xss_and_check_plain($unsafe_string) {
//  filter_xss()
  $safe_string = filter_xss($unsafe_string);

  return $safe_string;
}

function get_gm_name($employeeName) {
  $query = db_select('prs_rel_employee_counselor_gm', 'precg')
      ->fields('precg', array('gmName'))
      ->condition('precg.employeeName', $employeeName, '=');
  $result = $query->execute()->fetchAll();
  if (count($result) == 1)
    return $result['0']->gmName;
  else
    return 'No GM';
}

/**
 * base type number return type string
 * @param type $type
 * @return string
 */
function get_review_type_string($type) {
  switch ($type) {
    case '0':
      //  0 for annual review;
      $review_type = 'Annual review';
      break;
    case '1':
      // 1 for project review;
      $review_type = 'Project review';
      break;
    case '2':
      // 2 for 3-month review
      $review_type = 'Three-month review';
      break;
  }
  return $review_type;
}

/**
 * base status number return status string
 * @param type $status
 * @return string
 */
function get_review_status_string($status) {
  switch ($status) {
    case 0:
      //0 for New review start
      $content = 'Start Review';
      break;
    case 1:
      //1 for review in draft;
      $content = 'Review in Draft';
      break;
    case 2:
      // 2 for review by counsellor;
      $content = 'Review by Counselor';
      break;
    case 3:
      // 3 for approved by counsellor;
      $content = 'Approved by Counselor';
      break;
    case 4:
      // 4 for joint review;
      $content = 'Joint review';
      break;
    case 5:
      // 5 for GM review;
      $content = 'GM Review';
      break;
    case 6:
      // 6 for GM approved;
      $content = 'GM Approve';
      break;
  }
  return $content;
}

function get_review_type_by_rreid($rreid) {
  $query = db_query("select ge.type from {prs_rel_review_employee} rev,{prs_general} ge where rev.prid= ge.prid and rev.rreid=$rreid");
  $result = $query->fetchAll();

  if (count($result) == 1)
    return $result[0]->type;
  else
    return -1;
}